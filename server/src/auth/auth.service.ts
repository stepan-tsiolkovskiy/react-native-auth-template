import { Injectable, UnauthorizedException, ConflictException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { UsersService } from '../users/users.service';
import { SignUpDto } from './dto/signup.dto';
import { SignInDto } from './dto/signin.dto';
import { AuthResult } from './interfaces/user.interface';

@Injectable()
export class AuthService {
  constructor(
    private usersService: UsersService,
    private jwtService: JwtService,
  ) {}

  async signUp(signUpDto: SignUpDto): Promise<AuthResult> {
    const { username, email, password } = signUpDto;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    const existingUser = await this.usersService.findByEmail(email);
    if (existingUser) {
      throw new ConflictException('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î');
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const user = await this.usersService.create(username, email, password);
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–æ–∫–µ–Ω–∏
    const tokens = await this.generateTokens(user.id, user.email);
    
    console.log('üéâ SignUp —É—Å–ø—ñ—à–Ω–∏–π –¥–ª—è:', email);
    console.log('üîë –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —Ç–æ–∫–µ–Ω–∏:', tokens);

    return {
      ...tokens,
      user: {
        id: user.id,
        email: user.email,
        username: user.username,
      },
    };
  }

  async signIn(signInDto: SignInDto): Promise<AuthResult> {
    const { email, password } = signInDto;
    
    // –í–∞–ª—ñ–¥—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const user = await this.usersService.validateUser(email, password);
    if (!user) {
      throw new UnauthorizedException('–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É');
    }

    // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–æ–∫–µ–Ω–∏
    const tokens = await this.generateTokens(user.id, user.email);
    
    console.log('üéâ SignIn —É—Å–ø—ñ—à–Ω–∏–π –¥–ª—è:', email);
    console.log('üîë –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —Ç–æ–∫–µ–Ω–∏:', tokens);

    return {
      ...tokens,
      user: {
        id: user.id,
        email: user.email,
        username: user.username,
      },
    };
  }

  async refreshTokens(refreshToken: string): Promise<{ access_token: string; refresh_token: string }> {
    try {
      // –í–µ—Ä–∏—Ñ—ñ–∫—É—î–º–æ refresh token
      const payload = await this.jwtService.verifyAsync(refreshToken);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ —ñ—Å–Ω—É—î
      const user = await this.usersService.findByEmail(payload.email);
      if (!user) {
        throw new UnauthorizedException('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π');
      }

      // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏
      const tokens = await this.generateTokens(user.id, user.email);
      
      console.log('üîÑ –¢–æ–∫–µ–Ω–∏ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–ª—è:', payload.email);
      console.log('üîë –ù–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏:', tokens);

      return tokens;
    } catch (error) {
      console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ refresh —Ç–æ–∫–µ–Ω–∞:', error.message);
      throw new UnauthorizedException('–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π refresh token');
    }
  }

  private async generateTokens(userId: string, email: string) {
    const payload = { sub: userId, email };
    
    const access_token = await this.jwtService.signAsync(payload, {
      expiresIn: '15m', // 15 —Ö–≤–∏–ª–∏–Ω
    });
    
    const refresh_token = await this.jwtService.signAsync(payload, {
      expiresIn: '7d', // 7 –¥–Ω—ñ–≤
    });

    return {
      access_token,
      refresh_token,
    };
  }
}